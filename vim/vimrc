" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

call plug#begin('~/dotfiles/vim/plugged')
Plug 'altercation/vim-colors-solarized'
Plug 'cespare/vim-toml'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'guns/vim-sexp'
Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }
Plug 'hashivim/vim-terraform'
Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }
Plug 'jpalardy/vim-slime', { 'for': 'python' } " Needed for vim-ipython-cell
Plug 'itchyny/lightline.vim'
Plug 'jnurmine/Zenburn'
Plug 'jpalardy/vim-slime', { 'for': 'python' } " Needed for vim-ipython-cell
Plug 'psf/black', { 'branch': 'stable' }
Plug 'terryma/vim-expand-region'
Plug 'tmux-plugins/vim-tmux-focus-events' " Used for autoread file on change.
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-scripts/indentpython.vim'
call plug#end()

let g:mapleader = ","

" Because it almost was.
nnoremap <C-c> <Esc>
inoremap <C-c> <Esc>

" Move between windows easier
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" 256 Colors!
set t_Co=256

" Switch syntax highlighting on
syntax on

" Set color theme
set background=light
colorscheme solarized
set colorcolumn=80

set backspace=indent,eol,start " Make backspace behave in a sane manner

" Highlight search results
set hlsearch

" Show matches as search is typed
set incsearch

" Setting for whitespace visualization
set list
set listchars=trail:Â·,tab:\ \

" Always ensure there is a status bar
set laststatus=2

" Leader n to remove highlighted search fields
nnoremap <leader>n :nohlsearch<cr>
" Leader s to save all files
nnoremap <leader>s :wa<cr>
" Set up Ctrl-P Fuzzy File Finder
let g:ctrlp_map = '<leader>t'
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Set the status line
set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" Show line, column, %, at bottom of window
set ruler

" Don't wrap long lines
set nowrap

" Searches are case-sensitive only if they contain upper-case
set ignorecase
set smartcase

" Begin scrolling before hitting edges
set scrolloff=7

" Store temporary files in one place
set backupdir=~/.vim-tmp
set directory=~/.vim-tmp

" tab->spaces and such
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
autocmd FileType python set shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType yaml set shiftwidth=2 tabstop=2 softtabstop=2 expandtab

" vsplit opens to the right instead of left
set splitright
" split opens below instead of pushing current down
set splitbelow

" When doing :e <tab> shows list of possible completions like in bash.
set wildmode=list:longest,full

" Remove trailing whitespace on save and keep cursor position.
function! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Trigger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
" Need vim-tmux-focus-events plugin and `set -g focus-events on` in .tmux.conf
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif

" Filetypes
autocmd BufNewFile,BufRead *.boot set filetype=clojure
autocmd BufNewFile,BufRead *.mat set filetype=matlab
autocmd BufNewFile,BufRead *.avsc set filetype=json

" Compile latex
autocmd BufWritePost, *.tex silent! execute "!/Library/TeX/texbin/pdflatex <afile>" | redraw!

" lightlight
set noshowmode " remove redundant -- Insert -- below lightline
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ],
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'percent': 'LightlinePercent',
      \ },
      \ }

function! LightlineFileformat()
  return winwidth(0) > 93 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 93 ? &fileencoding : ''
endfunction

function! LightlinePercent()
  return winwidth(0) > 70 ? (100 * line('.') / line('$')) . '%' : ''
endfunction

" Python formatter
" Run Black on save.
autocmd BufWritePre *.py execute ':Black'
let g:black_linelength = 80

let g:slime_target = "tmux"
let g:slime_no_mappings = 1
let g:slime_python_ipython = 1
xmap cpp <Plug>SlimeRegionSend
nmap cpp <Plug>SlimeParagraphSend
nmap cpv <Plug>SlimeConfig

" Clojure
let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let', '^fdef', '^render']
